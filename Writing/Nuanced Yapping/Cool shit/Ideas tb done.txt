Ideas 2b done:

Komak the Maid ENTJ never stop on your way to a dream "I gotta see it happen. and I will" "I will have enough time for sleep and tepid moderation while on my grave than you very much)

- Being aware of how you feel has to do with Having high Pi not high Fi

- My challenge is the struggle to balance academic curiosity with commitment


- Make my music streamer have the option for file downloads (easy to do. just one more enum const and one more switch branch in client and server)


-Make the client of my streamer buffer server sent chunks. I plan on using a queue in circular buffer.
There will be 2 cursors; A playing cursor and a receiving cursor.
When the queue is full, IE it is 1 less unit in the circular sequence than the playing cursor, and it is smaller in that same sequence  it stops asking for chunks.
When both are separated by 1 in the sequence and the playing is bigger, the playback simply stops until more chunks come (the recv cursor increases).
The client will need to have a circular queue of chunks data structure and 2 threads.
The queue module will be where the media playing happens at.
Acess to the queue will be mutex protected. There will be cond vars.
And a latency constant that decides how much time is waited until the actual playing begins, to give the queue time to fill up.


The client will also store a file of hosts it previously connected to,so that one can simply pick "last" as the connected address and basically iterate them until one works. There will be a stored address data structure that will be gotten rid of as soon as the connection happens.

And, from now on, addresses imputs will be a single <ip>:<port> in the cmdline instead of <ip> AND <port>. its much less clumsy and more memorizable

I will use scanf until I find a colon, take that as ip. the rest is port. Simple! Ill do the same with the server.


The circular queue will be specialized. I dont tend to pay attention to college very much but I know one thing: Its very rare for a generalized queue to be efficient and idiot proof. I will just make it, specifically, a chunk queue. You play your chunks and you dequeue and enqueue your chunks and check wether or not its full or empty. Thats it. It works with chunks and nothing else. this is important so that I can make it non malloc dependent. there will be a balast number: it will be positive when there are chunks to be played. Zero when we played everything. We will only go forward.

when
