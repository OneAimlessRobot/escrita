Programming Ideas:

Music streamiyng client/server.

I will make it in C sockets.

I will start by streaming a single song to a single client.

I will use SDL to send the mp3 file whole and then play it. So its basically an FTP server that plays music automatically. Id have to send the size of the file to the client and only start playing when the correct number of bytes had been sent.

I will test it with docker containers first. Then with my phone. Would it not be cool to play a song from my room to the 3rd floor from the residence? 
I can already 'ls' remotely using my remotecmd command
I can also make a 'clear based' menu (to make it uncomplicated) with preset commands like 'play', 'pause', 'stop' and even a 'fak_u' (shuts down the whole thing) (hidden command)

I will use TCP sockets to transfer the file, as the client should not be allowed to play the file before it is fully transfered (Imma transfer im MP3).

No! i remembered: I cant test it with my phone... well... I can test the server from my phone... at least... I mean why dont I just make an HTML page served through sockets? Because my phone can already deal with http... BUUUUUUT... making server/clients with my own protocols and parsers is fun. But I would not be able to test it with my phone because I never managed to get anything mine that is SDL related to work in my android. (Cuz shit does not compile... and I dont feel like figuring that out. so if my self brewed shit turns out to be another useless, interesting toy so be it)

so... isnt this just an overly complicated mashup of a custom com protocol and an SDL based mp3 player made with TCP based sockets? Yes! But I can do it because: Programming is my art, and: Good artists create, great ones steal and wise ones recycle

So... the operation will be: Server opens -> wait for conns

Client boots up with Server IP and port as Arg -> fetch.

Server accepts. Generates process for that connection. sends a formatted string with:
mp3 file size.
MP3 file name.
Client gets it. client creates a string far to store the server side file info. De-formats it with the C string library.

Format laws is known, both by the server and the client.

client makes an int var with the curr bytes transfered and a string to store the file name. Spaces will be replaced with underscores. Copies them there somehow. OHH! i can use snscanf!!!!!!. Opens a new file pointer. Makes the file in folder name decided at compile time (so far)

Client replies. Client enters a loop.

Server starts sending until its over. Its over. Server's launched process ends.
 
Client now has the song. The song begins paused. Now it allows you to toggle pause it/stop. Stop shuts down the client. Fak_u shuts down both.

Oh! The server controls the file broadcasted (so far)


Perguntas de Streaming:

Professores:
Pedro Medeiros. Sergio Duarte. Antonio Ravara.

Converter MP3 para RAW mid request é lento? 

Guardar cache de packets de som é caro?

Será que podemos fazê-lo usando um processo? O processo teria de ter um loop de comandos: Teria de ser capaz de terminar, continuar a stream. A pausa pode ser uma cena que simplesmente diga ao processo para... Oh! Teria de ler os packets de um ficheiro em tempo real e guardar o progresso percorrido no ficheiro em server side quando pauso. Por isso... temos de ter uma struct com:

pid
Filepointer (int)
pausado/tocando? (bool)



Em client side, precisamos de spawnar uma struct com:

1- pausado/tocando? (bool)
2- Buffer com o packet atual.


Tenho de ver se tocar chunks com SDL é pausavel (acho que n é)

O processo lançado server side avança *1 packsize* de cada vez. E se pausar-mos mid chunk? Para já, vou só dizer ao processo que pare a stream de packets.

Em client side, preciso de alocar memória para, potencialmente, guardar o equivalente ao tamanho
da stream. Se calhar preciso de um ficheiro em disco com a cache. Ou então cache em memória RAM.
Vamos começar por fazer só com RAM. O server precisa, se fizermos streaming UDP, de enviar o tamanho da stream em vez do tamanho de ficheiro. (Potencialmente megas de ram de cache).

Vem packet e guardamos o chunk.
Ao Mesmo tempo, ao vir um chunk, notificamos um thread... oh! precisamos de um thread. Invocar um processo por cada chunk é lento. Precisamos de um mutex: para escrever na memoria cache. E depois para ler de cache também. (Um mutex a proteger esses 2 tipos de acesso ao chunk em cache). 

Olha vou ser sincero: Acho que ainda n tenho what it takes para fazer streaming. Costumo refutar-me bastante neste tipo de conclusões mas quando aparecem threads começo a suar fds...








Mas tocar chunks com SDL mixer n é lento? Preparar, tocar parar... Preparar, tocar, parar... olha fds brinquedo. E alem disso... streaming.


Streaming tem de ser por UDP

Temos de converter MP3 em RAW para streamar para depois tocar usando SDL? (Sim!) (Mp3 parcial é inutil)

Olha eu sei: objetivos grandes ou whatever. Mas eu ainda nem sei se consigo fazer o non streaming primeiro though... fds streaming por agora

Vou chamar-lhe: Emotion pipeline: the mp3 syringe

Devia fazer com que, se em server side, no ficheiro escolhido o autor nos metadados não tem Maid no nome, I server crasha. Porra... isto vai ser um brinquedo só usado com dockers anyway

