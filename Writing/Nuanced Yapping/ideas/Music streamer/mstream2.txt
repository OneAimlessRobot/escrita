- Make my music streamer have the option for file downloads (easy to do. just one more enum const and one more switch branch in client and server)


-Make the client of my streamer buffer server sent chunks. I plan on using a queue in circular buffer.
There will be 2 cursors; A playing cursor and a receiving cursor.
When the queue is full, IE it is 1 less unit in the circular sequence than the playing cursor, and it is smaller in that same sequence  it stops asking for chunks.
When both are separated by 1 in the sequence and the playing is bigger, the playback simply stops until more chunks come (the recv cursor increases).
The client will need to have a circular queue of chunks data structure and 2 threads.
The queue module will be where the media playing happens at.
Acess to the queue will be mutex protected. There will be cond vars.
And a latency constant that decides how much time is waited until the actual playing begins, to give the queue time to fill up.


The client will also store a file of hosts it previously connected to,so that one can simply pick "last" as the connected address and basically iterate them until one works. There will be a stored address data structure that will be gotten rid of as soon as the connection happens.

And, from now on, addresses imputs will be a single <ip>:<port> in the cmdline instead of <ip> AND <port>. its much less clumsy and more memorizable

I will use scanf until I find a colon, take that as ip. the rest is port. Simple! Ill do the same with the server.


The circular queue will be specialized. I dont tend to pay attention to college very much but I know one thing: Its very rare for a generalized queue to be efficient and idiot proof. I will just make it, specifically, a chunk queue. You play your chunks and you dequeue and enqueue your chunks and check wether or not its full or empty. Thats it. It works with chunks and nothing else. this is important so that I can make it non malloc dependent. there will be a balast number: it will be positive when there are chunks to be played. Zero when we played everything. We will only go forward.


*back to music streamer*


I got the queue working. Now I should try to milk the f*** out of these 2 concepts: Slide windows and switching buffers. First I will create a branch where I copy the stuff from the q_buffer branch to it and then go on and experiment. I shall call the new branch: s_windows. I will try to use sliding windows between the rx and play threads in the client and then between the server and the clients rx thread and *just* focus on that new concept and keeping the queue. Then... if its faster, I will keep it for the next branch, s_buffer... where I will try to combine sliding windows with switching buffers. The main issue with the queue I have now is the fact that multiple threads access the same resource. sooo... the locking mutexes make the rx and play threads trip over eachother and the stream ends up slowing down alot... but it is slightly faster than before. With switching buffers, Allegedly I only need the mutex to protect the acess to the buffer switching mechanism, where one never really has to wait for the other to be done... we just have to switch on use... but then.... how the hell do I combine that with slide windows? I dont know.... I dont know and Im tired now... Im gonna leave it be for now... lots of stuff to do...




Ok o streaming ja funciona a 100%. Mas agora quero implementar um server browser


- Make my music streamer have the option for file downloads (easy to do. just one more enum const and one more switch branch in client and server)


-Make the client of my streamer buffer server sent chunks. I plan on using a queue in circular buffer.
There will be 2 cursors; A playing cursor and a receiving cursor.
When the queue is full, IE it is 1 less unit in the circular sequence than the playing cursor, and it is smaller in that same sequence  it stops asking for chunks.
When both are separated by 1 in the sequence and the playing is bigger, the playback simply stops until more chunks come (the recv cursor increases).
The client will need to have a circular queue of chunks data structure and 2 threads.
The queue module will be where the media playing happens at.
Acess to the queue will be mutex protected. There will be cond vars.
And a latency constant that decides how much time is waited until the actual playing begins, to give the queue time to fill up.


The client will also store a file of hosts it previously connected to,so that one can simply pick "last" as the connected address and basically iterate them until one works. There will be a stored address data structure that will be gotten rid of as soon as the connection happens.

And, from now on, addresses imputs will be a single <ip>:<port> in the cmdline instead of <ip> AND <port>. its much less clumsy and more memorizable

I will use scanf until I find a colon, take that as ip. the rest is port. Simple! Ill do the same with the server.


The circular queue will be specialized. I dont tend to pay attention to college very much but I know one thing: Its very rare for a generalized queue to be efficient and idiot proof. I will just make it, specifically, a chunk queue. You play your chunks and you dequeue and enqueue your chunks and check wether or not its full or empty. Thats it. It works with chunks and nothing else. this is important so that I can make it non malloc dependent. there will be a balast number: it will be positive when there are chunks to be played. Zero when we played everything. We will only go forward.


*back to music streamer*


I got the queue working. Now I should try to milk the f*** out of these 2 concepts: Slide windows and switching buffers. First I will create a branch where I copy the stuff from the q_buffer branch to it and then go on and experiment. I shall call the new branch: s_windows. I will try to use sliding windows between the rx and play threads in the client and then between the server and the clients rx thread and *just* focus on that new concept and keeping the queue. Then... if its faster, I will keep it for the next branch, s_buffer... where I will try to combine sliding windows with switching buffers. The main issue with the queue I have now is the fact that multiple threads access the same resource. sooo... the locking mutexes make the rx and play threads trip over eachother and the stream ends up slowing down alot... but it is slightly faster than before. With switching buffers, Allegedly I only need the mutex to protect the acess to the buffer switching mechanism, where one never really has to wait for the other to be done... we just have to switch on use... but then.... how the hell do I combine that with slide windows? I dont know.... I dont know and Im tired now... Im gonna leave it be for now... lots of stuff to do...




Ok o streaming ja funciona a 100%. Mas agora quero implementar um server browser.

O sistema vai passar a ter as seguintes componentes:

Server
 - motor
 - Conexão (destacada) (fork do engine (vive independentemente do engine))

   -Se o request for down/conf/peek a conexao é só um fornecedor de ficheiro unico. Um source de ficheiros
   - Thread de acks com o cliente durante a stream. Controla a stream com timeouts. É um mini heart beater
   - Thread de transferencia. Transfere a musica chunk a chunk.
 - Heartbeat Server interactor. (thread do engine. vive com ele. Assegura que o server se mantem acessivel pelo server browser.)

Cliente:
 -Faz down/conf/peek - so ele mesmo. É só um sink de ficheiros

 -Faz play 

   - Thread de rx - recebe chunks.
   - Thread de play - toca chunks. Interage com rx por meio de uma queue circular com tamanho definivel por config.
   - thread de stats- mostra os stats da stream. 
   -Thread de acks do server. É um mini heart beater.



LocalHost SQLite Db de servers: Este componente é uma base de dados gerida localmente no pc onde o Heart beat server é lançado.
É atualizada a todo o momento com informação acerca dos servers.
Uma tabela de server entries.

Uma server entry é constituida por:

Nome- Criado aleatoriamente na genese do server. String random com tamanho fixo.
Chunk size - util para os clientes
Ip do server
porta do server.


Heartbeat server

- Sei que vai ter dois threads:
- Aceitador de pedidos de server browsers para que lhes seja fornecida uma lista de servers.
(Ok... pensando melhor... nem sei se é possivel transferir assim estas cenas de forma tão direta com simples csvs, fds e sockfds. como estava a imaginar... tenho de estudar melhor as bibliotecas de C de SQLite.)
- Aceitador de heartbeats. Nao sei:
como vai aceitar servers. se ha de fazer threads, forks, usar epoll ou select... sou capaz de usar select.
Mas vai a todos os socks no seu set de readfds. e vai ter de o fazer rapido. Vai ter de se manter a par de quantos heartbeats em atraso tem cada server.

O engine tem uma struct, 
o streamer cliente tem uma struct, o streamer server tem uma struct
Uma conexao é uma struct
Um server browser é uma struct.
Um heartbeat acceptor é uma struct.
Um heartbeat connector do server é uma struct.
Um chunk player é uma struct.


As portas do server vão ser: 
Engine: 9001
Conexao:  x, x+1, x+2.......: x = 9002
Heartbeater: x, x+1,x+2, x E (1, 31998k) (É este que se conecta, logo n precisa de portas fixas.)(random)

As portas do cliente são: x, x+1,x+2, x E (1, 31998k) (random)


Server browser: x, x+1,x+2, x E (1, 31998k) (É este que se conecta, logo n precisa de portas fixas.) (random)

HeartBeat Server:

Aceitador de Heartbeats/fornecedor de lista de servers: x, x-1, x-2.......... x = 8999 & x >=1


Edit: Pera.... mas bases de dados SQLite são... ficheiros Db que basicamente são só csvs glorificados! Eu posso 100% enviá-las a server browsers!

Uma conexão é uma struct que pode ser iniciada de 2 formas:
Server: (Nao significa que seja um server. chama-se assim porque a outra versão, a client é quem toma a iniciativa. é preciso separar quem toma a iniciativa de quem não toma. Tem 3 sockets, cada uma com seu buffer:

Socket tcp, udp e udp_ack.
Depois tem um bool is_on e varios metodos de read e send: con_send_udp, 
con_send_udp,
con_send_ack_udp

(resp. read)






