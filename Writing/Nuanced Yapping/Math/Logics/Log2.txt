Logical nuanced breakdown:


So... basically... we have learned a very good method of proving wether or not Formulas of Propositional Logic are contradictons or not! Prop. Resolution! R system of logical deduction proofs.

Concepts to know:

- Horn Formulas.
- CNF Formulas.
- Basic Propositional Logic.

So... we already know that... F entails G, if and only if, F -> G Is a tautology.

But... remember this for later, this is important, we can guarantee that, F -> G is a Tautology, if any only if, n(F -> G) is a contradiction.

We can apply the R system to figure out if a formula is either possible or contradictory in nature.

The process is:


Take the formula you want to figure out the nature of

F

Put F im CNF. (Any Prop. Logic formula can be converted to it)

Then... check validity.

If for every clause, there is a prop plus its negation, its valid and end of story.


Otherwise...

check if F is a horn Formula.

If it is, we can apply... first:


--------------------------------------------------------------------------
Now we are going to define the types of objects the Resolution works with:


Step just tells us where we are.
Ok. So we have a CNF formula.

We can represent it in a set like this:

P V Q  V R.<=> {{p, q, r}}

(P V Q) & ( n(P) V n(Q)  V R) 
<=>
{{P,Q}, {n(P), n(Q), R}}

Where the formula is a set of clauses that is a set of formulas.

--------------------------------------------------------------------------
Now... the general idea is the following generalized protocol, that the R system always follows:

Its this natural deduction corolary:

If we have (Formula A) V n(p)
and we have
	(Formula A) V p

We can derive...

(Formula A) by itself!

This result is called the rule of Resolution.



You take the set of all clauses, and choose 2 of them, of the current set. These two clauses have to contain, if A contains symbol x, clause B has to 
contain n(x). If that happens, we unite the set of all clauses with the clause that results from the following:

Counterclause generation:
- removing either x from A, or n(x) from B and call it C. (resolution step)
- Then put C in a set. It becomes {C}.

Unite the set of clauses with that.

And we repeat this until, either we find the empty set, or the set stops growing (reached a fixed point), which happens when Counterclause generation cannot happen any longer.

In a nutshell...
If we get an empty set, the formula is contradictory.

If it... just stops growing, its possible.

But there is a drawback:

There is a chance that, depending on the order we choose clauses and the c rows we use in our resolutions, we can end up in infinite loops... as the number of c clauses generated can become really big, really quickly.

(Exponential with the current step number)


So... some really dedicated people figured out that, if the formula in question has a certain shape, we can use different more or less mechanical processes to reach an ending in a more algorithmical way.
(Remember what subject this is? COMPUTATIONAL logic!)




-------------------------------------------------
A small visualization that may be useful:
It helps to draw a table with 3 colums: Step, Curr clause and justification.

Its not essential to see it like this but its a good visual aid.


Resolution, using this visualisation, consists in taking a clause. Any clause. Shoving it in the tables top slot. Then we find... ANY we want that contains the negative of one of our symbols (the first clause) and we write the index of the clause in the justification slot of each. Then... we write Res (index_i, index_h) in the just....

By the way:


The first colum will be called s, the second c and the third r.


in the j colum, in row n+1, where n is the current bottom index slor, and also inc. the slot into its s colum. then, in the c colum, we write the result of removing our target premisse from either one.
Them we keep going...
We are allowed to use any 2 clauses above the n-th row.

If we EVER get an empty set, that means the formula is contradictory.


So...


If it is a Horn Formula, and it follows the following steps... it means it follows SLD, the most mechanical R system strategy.

We start by...

Taking a clause and... going after a another that neg8s only... either... the RIGHTMOST or the LEFTMOST propositional symbol of each clause. AND... we can only use the TWO RESULTS DIRECTLY ABOVE step n (n-1 and n-2) to keep growing the table.

SLD stands for (Selector Linear Deterministic).

And we have to keep doing it this way... because thats how it works.


(I know disjuction is commutative, but the teacher said "just trust me" and I also do not care enough to figure out why

*Note*: We are doing this method in class specifically because of a pedagogic choice by the people who design the course. Its a choice. And the reason we choose to do this is because SLD is an iconic example of taking a formula and figuring out its nature in a way that is easly turned into an algorithm.

We are suposed to drill this so that we keep it in our minds in case we ever need to implement it ourselves.

And the number of steps taken varies with the order of clauses chosen)
)


N resolution (negative resolution):


if each step of resolution involves at least one c row where every symbol is a neg8ion of a proposition...

N Resolution is being used in it.

N Resolution is more flexible than SLD, as we can, as long as we follow the general guideline listed above, use ANY two result clauses already in the set (it does not need a specific order).


But...


It will only stop when we, either get an empty set, or we get a fixed point, that is... the set stops growing.

So then...


How do we figure out... using the table method, wether or not the equivalent set to the current table will keep growing or not?

The answer is...

We cant!

So it is advisable to use the conventional set method.

It wont make it any less of a hassle... as one will have to have enough imagination, intuition and skill to educatedly guess the steps that if, at any given stage, will most likely lead to, either a fixed point or a contradiction.


L resolution: (Linear resolution)


L resolution is called like that because, if we visualize the proof as a table again, we only use the latest addicion to the resolution set, PLUS ANY previous one.

Its also more advisable to use the conventional set notation with this one... if one can keep track of the latest addition.




 